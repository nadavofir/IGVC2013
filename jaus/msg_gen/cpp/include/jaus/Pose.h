/* Auto-generated by genmsg_cpp for file /home/ras/ros/ros-pkg/IGVC2013/jaus/msg/Pose.msg */
#ifndef JAUS_MESSAGE_POSE_H
#define JAUS_MESSAGE_POSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace jaus
{
template <class ContainerAllocator>
struct Pose_ {
  typedef Pose_<ContainerAllocator> Type;

  Pose_()
  : xpos(0.0)
  , ypos(0.0)
  , zpos(0.0)
  , roll(0.0)
  , pitch(0.0)
  , yaw(0.0)
  {
  }

  Pose_(const ContainerAllocator& _alloc)
  : xpos(0.0)
  , ypos(0.0)
  , zpos(0.0)
  , roll(0.0)
  , pitch(0.0)
  , yaw(0.0)
  {
  }

  typedef double _xpos_type;
  double xpos;

  typedef double _ypos_type;
  double ypos;

  typedef double _zpos_type;
  double zpos;

  typedef double _roll_type;
  double roll;

  typedef double _pitch_type;
  double pitch;

  typedef double _yaw_type;
  double yaw;


  typedef boost::shared_ptr< ::jaus::Pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jaus::Pose_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Pose
typedef  ::jaus::Pose_<std::allocator<void> > Pose;

typedef boost::shared_ptr< ::jaus::Pose> PosePtr;
typedef boost::shared_ptr< ::jaus::Pose const> PoseConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::jaus::Pose_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::jaus::Pose_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace jaus

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::jaus::Pose_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::jaus::Pose_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::jaus::Pose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1ee08947271b4f230fb2d5bc945eb424";
  }

  static const char* value(const  ::jaus::Pose_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1ee08947271b4f23ULL;
  static const uint64_t static_value2 = 0x0fb2d5bc945eb424ULL;
};

template<class ContainerAllocator>
struct DataType< ::jaus::Pose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "jaus/Pose";
  }

  static const char* value(const  ::jaus::Pose_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::jaus::Pose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 xpos\n\
float64 ypos\n\
float64 zpos\n\
\n\
float64 roll\n\
float64 pitch\n\
float64 yaw\n\
\n\
";
  }

  static const char* value(const  ::jaus::Pose_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::jaus::Pose_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::jaus::Pose_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.xpos);
    stream.next(m.ypos);
    stream.next(m.zpos);
    stream.next(m.roll);
    stream.next(m.pitch);
    stream.next(m.yaw);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Pose_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jaus::Pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::jaus::Pose_<ContainerAllocator> & v) 
  {
    s << indent << "xpos: ";
    Printer<double>::stream(s, indent + "  ", v.xpos);
    s << indent << "ypos: ";
    Printer<double>::stream(s, indent + "  ", v.ypos);
    s << indent << "zpos: ";
    Printer<double>::stream(s, indent + "  ", v.zpos);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
  }
};


} // namespace message_operations
} // namespace ros

#endif // JAUS_MESSAGE_POSE_H

