/* Auto-generated by genmsg_cpp for file /home/ras/IGVC2013/imu_filter/msg/FilteredIMUData.msg */
#ifndef IMU_FILTER_MESSAGE_FILTEREDIMUDATA_H
#define IMU_FILTER_MESSAGE_FILTEREDIMUDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Point.h"
#include "geometry_msgs/Vector3.h"

namespace imu_filter
{
template <class ContainerAllocator>
struct FilteredIMUData_ {
  typedef FilteredIMUData_<ContainerAllocator> Type;

  FilteredIMUData_()
  : position()
  , velocity()
  , roll(0.0)
  , pitch(0.0)
  , yaw(0.0)
  {
  }

  FilteredIMUData_(const ContainerAllocator& _alloc)
  : position(_alloc)
  , velocity(_alloc)
  , roll(0.0)
  , pitch(0.0)
  , yaw(0.0)
  {
  }

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
   ::geometry_msgs::Point_<ContainerAllocator>  position;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  velocity;

  typedef double _roll_type;
  double roll;

  typedef double _pitch_type;
  double pitch;

  typedef double _yaw_type;
  double yaw;


  typedef boost::shared_ptr< ::imu_filter::FilteredIMUData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imu_filter::FilteredIMUData_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct FilteredIMUData
typedef  ::imu_filter::FilteredIMUData_<std::allocator<void> > FilteredIMUData;

typedef boost::shared_ptr< ::imu_filter::FilteredIMUData> FilteredIMUDataPtr;
typedef boost::shared_ptr< ::imu_filter::FilteredIMUData const> FilteredIMUDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::imu_filter::FilteredIMUData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::imu_filter::FilteredIMUData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace imu_filter

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::imu_filter::FilteredIMUData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::imu_filter::FilteredIMUData_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::imu_filter::FilteredIMUData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "810801c7caac3a9aa8ca4d780921fe8d";
  }

  static const char* value(const  ::imu_filter::FilteredIMUData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x810801c7caac3a9aULL;
  static const uint64_t static_value2 = 0xa8ca4d780921fe8dULL;
};

template<class ContainerAllocator>
struct DataType< ::imu_filter::FilteredIMUData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "imu_filter/FilteredIMUData";
  }

  static const char* value(const  ::imu_filter::FilteredIMUData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::imu_filter::FilteredIMUData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#postion information. z is always zero.\n\
geometry_msgs/Point position\n\
\n\
#velocity information. z is always zero.\n\
geometry_msgs/Vector3 velocity\n\
\n\
#yaw pitch and roll\n\
float64 roll    #roll from the imu\n\
float64 pitch   #pitch from the imu\n\
float64 yaw     #yaw from the imu\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::imu_filter::FilteredIMUData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::imu_filter::FilteredIMUData_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::imu_filter::FilteredIMUData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.position);
    stream.next(m.velocity);
    stream.next(m.roll);
    stream.next(m.pitch);
    stream.next(m.yaw);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FilteredIMUData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imu_filter::FilteredIMUData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::imu_filter::FilteredIMUData_<ContainerAllocator> & v) 
  {
    s << indent << "position: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
  }
};


} // namespace message_operations
} // namespace ros

#endif // IMU_FILTER_MESSAGE_FILTEREDIMUDATA_H

