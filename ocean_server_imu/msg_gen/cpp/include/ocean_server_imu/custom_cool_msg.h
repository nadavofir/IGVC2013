/* Auto-generated by genmsg_cpp for file /home/ras/IGVC2013/ocean_server_imu/msg/custom_cool_msg.msg */
#ifndef OCEAN_SERVER_IMU_MESSAGE_CUSTOM_COOL_MSG_H
#define OCEAN_SERVER_IMU_MESSAGE_CUSTOM_COOL_MSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ocean_server_imu
{
template <class ContainerAllocator>
struct custom_cool_msg_ {
  typedef custom_cool_msg_<ContainerAllocator> Type;

  custom_cool_msg_()
  : first_name()
  , last_name()
  , age(0)
  , score(0)
  {
  }

  custom_cool_msg_(const ContainerAllocator& _alloc)
  : first_name(_alloc)
  , last_name(_alloc)
  , age(0)
  , score(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _first_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  first_name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _last_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  last_name;

  typedef uint8_t _age_type;
  uint8_t age;

  typedef uint32_t _score_type;
  uint32_t score;


  typedef boost::shared_ptr< ::ocean_server_imu::custom_cool_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ocean_server_imu::custom_cool_msg_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct custom_cool_msg
typedef  ::ocean_server_imu::custom_cool_msg_<std::allocator<void> > custom_cool_msg;

typedef boost::shared_ptr< ::ocean_server_imu::custom_cool_msg> custom_cool_msgPtr;
typedef boost::shared_ptr< ::ocean_server_imu::custom_cool_msg const> custom_cool_msgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ocean_server_imu::custom_cool_msg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ocean_server_imu::custom_cool_msg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ocean_server_imu

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ocean_server_imu::custom_cool_msg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ocean_server_imu::custom_cool_msg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ocean_server_imu::custom_cool_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f8bfa80ae3c7a93455596d9622ad33a9";
  }

  static const char* value(const  ::ocean_server_imu::custom_cool_msg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf8bfa80ae3c7a934ULL;
  static const uint64_t static_value2 = 0x55596d9622ad33a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::ocean_server_imu::custom_cool_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ocean_server_imu/custom_cool_msg";
  }

  static const char* value(const  ::ocean_server_imu::custom_cool_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ocean_server_imu::custom_cool_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string first_name\n\
string last_name\n\
uint8 age\n\
uint32 score\n\
\n\
";
  }

  static const char* value(const  ::ocean_server_imu::custom_cool_msg_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ocean_server_imu::custom_cool_msg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.first_name);
    stream.next(m.last_name);
    stream.next(m.age);
    stream.next(m.score);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct custom_cool_msg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ocean_server_imu::custom_cool_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ocean_server_imu::custom_cool_msg_<ContainerAllocator> & v) 
  {
    s << indent << "first_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.first_name);
    s << indent << "last_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.last_name);
    s << indent << "age: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.age);
    s << indent << "score: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.score);
  }
};


} // namespace message_operations
} // namespace ros

#endif // OCEAN_SERVER_IMU_MESSAGE_CUSTOM_COOL_MSG_H

