"""autogenerated by genpy from vn_200_imu/vn_200_ins_soln.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import vn_200_imu.msg
import std_msgs.msg

class vn_200_ins_soln(genpy.Message):
  _md5sum = "8ef5890d88aaf7b237af923ec92b6fef"
  _type = "vn_200_imu/vn_200_ins_soln"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

vn_200_imu/EulerOrientation orientation_euler

float64 geodetic_latitude
float64 geodetic_longitude
float64 altitude

# gives the velocities in north-east-down directions
# x is north velocity
# y is east  velocity
# z is down  velocity
geometry_msgs/Vector3 ned_velocities

# uncertainty in attitude estimate in degrees
float64 attitude_uncertainty

# uncertainty in position estimate in meters
float64 position_uncertainty

# uncertainty in velocity estimate in meters/sec
float64 velocity_uncertainty

# error checking information
bool error_present
string error_string

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: vn_200_imu/EulerOrientation
float64 roll
float64 pitch
float64 yaw

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['header','orientation_euler','geodetic_latitude','geodetic_longitude','altitude','ned_velocities','attitude_uncertainty','position_uncertainty','velocity_uncertainty','error_present','error_string']
  _slot_types = ['std_msgs/Header','vn_200_imu/EulerOrientation','float64','float64','float64','geometry_msgs/Vector3','float64','float64','float64','bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,orientation_euler,geodetic_latitude,geodetic_longitude,altitude,ned_velocities,attitude_uncertainty,position_uncertainty,velocity_uncertainty,error_present,error_string

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(vn_200_ins_soln, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.orientation_euler is None:
        self.orientation_euler = vn_200_imu.msg.EulerOrientation()
      if self.geodetic_latitude is None:
        self.geodetic_latitude = 0.
      if self.geodetic_longitude is None:
        self.geodetic_longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.ned_velocities is None:
        self.ned_velocities = geometry_msgs.msg.Vector3()
      if self.attitude_uncertainty is None:
        self.attitude_uncertainty = 0.
      if self.position_uncertainty is None:
        self.position_uncertainty = 0.
      if self.velocity_uncertainty is None:
        self.velocity_uncertainty = 0.
      if self.error_present is None:
        self.error_present = False
      if self.error_string is None:
        self.error_string = ''
    else:
      self.header = std_msgs.msg.Header()
      self.orientation_euler = vn_200_imu.msg.EulerOrientation()
      self.geodetic_latitude = 0.
      self.geodetic_longitude = 0.
      self.altitude = 0.
      self.ned_velocities = geometry_msgs.msg.Vector3()
      self.attitude_uncertainty = 0.
      self.position_uncertainty = 0.
      self.velocity_uncertainty = 0.
      self.error_present = False
      self.error_string = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_12dB.pack(_x.orientation_euler.roll, _x.orientation_euler.pitch, _x.orientation_euler.yaw, _x.geodetic_latitude, _x.geodetic_longitude, _x.altitude, _x.ned_velocities.x, _x.ned_velocities.y, _x.ned_velocities.z, _x.attitude_uncertainty, _x.position_uncertainty, _x.velocity_uncertainty, _x.error_present))
      _x = self.error_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.orientation_euler is None:
        self.orientation_euler = vn_200_imu.msg.EulerOrientation()
      if self.ned_velocities is None:
        self.ned_velocities = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 97
      (_x.orientation_euler.roll, _x.orientation_euler.pitch, _x.orientation_euler.yaw, _x.geodetic_latitude, _x.geodetic_longitude, _x.altitude, _x.ned_velocities.x, _x.ned_velocities.y, _x.ned_velocities.z, _x.attitude_uncertainty, _x.position_uncertainty, _x.velocity_uncertainty, _x.error_present,) = _struct_12dB.unpack(str[start:end])
      self.error_present = bool(self.error_present)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_string = str[start:end].decode('utf-8')
      else:
        self.error_string = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_12dB.pack(_x.orientation_euler.roll, _x.orientation_euler.pitch, _x.orientation_euler.yaw, _x.geodetic_latitude, _x.geodetic_longitude, _x.altitude, _x.ned_velocities.x, _x.ned_velocities.y, _x.ned_velocities.z, _x.attitude_uncertainty, _x.position_uncertainty, _x.velocity_uncertainty, _x.error_present))
      _x = self.error_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.orientation_euler is None:
        self.orientation_euler = vn_200_imu.msg.EulerOrientation()
      if self.ned_velocities is None:
        self.ned_velocities = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 97
      (_x.orientation_euler.roll, _x.orientation_euler.pitch, _x.orientation_euler.yaw, _x.geodetic_latitude, _x.geodetic_longitude, _x.altitude, _x.ned_velocities.x, _x.ned_velocities.y, _x.ned_velocities.z, _x.attitude_uncertainty, _x.position_uncertainty, _x.velocity_uncertainty, _x.error_present,) = _struct_12dB.unpack(str[start:end])
      self.error_present = bool(self.error_present)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_string = str[start:end].decode('utf-8')
      else:
        self.error_string = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_12dB = struct.Struct("<12dB")
