/* Auto-generated by genmsg_cpp for file /home/ras/IGVC2013/jaus/msg/pose.msg */
#ifndef JAUS_MESSAGE_POSE_H
#define JAUS_MESSAGE_POSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace jaus
{
template <class ContainerAllocator>
struct pose_ {
  typedef pose_<ContainerAllocator> Type;

  pose_()
  : posx(0.0)
  , posy(0.0)
  , posz(0.0)
  , rotx(0.0)
  , roty(0.0)
  , rotz(0.0)
  {
  }

  pose_(const ContainerAllocator& _alloc)
  : posx(0.0)
  , posy(0.0)
  , posz(0.0)
  , rotx(0.0)
  , roty(0.0)
  , rotz(0.0)
  {
  }

  typedef double _posx_type;
  double posx;

  typedef double _posy_type;
  double posy;

  typedef double _posz_type;
  double posz;

  typedef double _rotx_type;
  double rotx;

  typedef double _roty_type;
  double roty;

  typedef double _rotz_type;
  double rotz;


  typedef boost::shared_ptr< ::jaus::pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jaus::pose_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct pose
typedef  ::jaus::pose_<std::allocator<void> > pose;

typedef boost::shared_ptr< ::jaus::pose> posePtr;
typedef boost::shared_ptr< ::jaus::pose const> poseConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::jaus::pose_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::jaus::pose_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace jaus

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::jaus::pose_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::jaus::pose_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::jaus::pose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e0d902d471e1eee6ffedf777b11d63d0";
  }

  static const char* value(const  ::jaus::pose_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe0d902d471e1eee6ULL;
  static const uint64_t static_value2 = 0xffedf777b11d63d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::jaus::pose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "jaus/pose";
  }

  static const char* value(const  ::jaus::pose_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::jaus::pose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 posx\n\
float64 posy\n\
float64 posz\n\
\n\
float64 rotx\n\
float64 roty\n\
float64 rotz\n\
\n\
";
  }

  static const char* value(const  ::jaus::pose_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::jaus::pose_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::jaus::pose_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.posx);
    stream.next(m.posy);
    stream.next(m.posz);
    stream.next(m.rotx);
    stream.next(m.roty);
    stream.next(m.rotz);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct pose_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jaus::pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::jaus::pose_<ContainerAllocator> & v) 
  {
    s << indent << "posx: ";
    Printer<double>::stream(s, indent + "  ", v.posx);
    s << indent << "posy: ";
    Printer<double>::stream(s, indent + "  ", v.posy);
    s << indent << "posz: ";
    Printer<double>::stream(s, indent + "  ", v.posz);
    s << indent << "rotx: ";
    Printer<double>::stream(s, indent + "  ", v.rotx);
    s << indent << "roty: ";
    Printer<double>::stream(s, indent + "  ", v.roty);
    s << indent << "rotz: ";
    Printer<double>::stream(s, indent + "  ", v.rotz);
  }
};


} // namespace message_operations
} // namespace ros

#endif // JAUS_MESSAGE_POSE_H

