/* Auto-generated by genmsg_cpp for file /home/ras/IGVC2013/external/bosch_drivers-0.4.2/photo/srv/Capture.srv */
#ifndef PHOTO_SERVICE_CAPTURE_H
#define PHOTO_SERVICE_CAPTURE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "sensor_msgs/Image.h"

namespace photo
{
template <class ContainerAllocator>
struct CaptureRequest_ {
  typedef CaptureRequest_<ContainerAllocator> Type;

  CaptureRequest_()
  {
  }

  CaptureRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::photo::CaptureRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::photo::CaptureRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CaptureRequest
typedef  ::photo::CaptureRequest_<std::allocator<void> > CaptureRequest;

typedef boost::shared_ptr< ::photo::CaptureRequest> CaptureRequestPtr;
typedef boost::shared_ptr< ::photo::CaptureRequest const> CaptureRequestConstPtr;


template <class ContainerAllocator>
struct CaptureResponse_ {
  typedef CaptureResponse_<ContainerAllocator> Type;

  CaptureResponse_()
  : image()
  {
  }

  CaptureResponse_(const ContainerAllocator& _alloc)
  : image(_alloc)
  {
  }

  typedef  ::sensor_msgs::Image_<ContainerAllocator>  _image_type;
   ::sensor_msgs::Image_<ContainerAllocator>  image;


  typedef boost::shared_ptr< ::photo::CaptureResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::photo::CaptureResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CaptureResponse
typedef  ::photo::CaptureResponse_<std::allocator<void> > CaptureResponse;

typedef boost::shared_ptr< ::photo::CaptureResponse> CaptureResponsePtr;
typedef boost::shared_ptr< ::photo::CaptureResponse const> CaptureResponseConstPtr;

struct Capture
{

typedef CaptureRequest Request;
typedef CaptureResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Capture
} // namespace photo

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::photo::CaptureRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::photo::CaptureRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::photo::CaptureRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::photo::CaptureRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::photo::CaptureRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "photo/CaptureRequest";
  }

  static const char* value(const  ::photo::CaptureRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::photo::CaptureRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::photo::CaptureRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::photo::CaptureRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::photo::CaptureResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::photo::CaptureResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::photo::CaptureResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b13d2865c5af2a64e6e30ab1b56e1dd5";
  }

  static const char* value(const  ::photo::CaptureResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb13d2865c5af2a64ULL;
  static const uint64_t static_value2 = 0xe6e30ab1b56e1dd5ULL;
};

template<class ContainerAllocator>
struct DataType< ::photo::CaptureResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "photo/CaptureResponse";
  }

  static const char* value(const  ::photo::CaptureResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::photo::CaptureResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_msgs/Image image\n\
\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in src/image_encodings.cpp\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::photo::CaptureResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::photo::CaptureRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CaptureRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::photo::CaptureResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.image);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CaptureResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<photo::Capture> {
  static const char* value() 
  {
    return "b13d2865c5af2a64e6e30ab1b56e1dd5";
  }

  static const char* value(const photo::Capture&) { return value(); } 
};

template<>
struct DataType<photo::Capture> {
  static const char* value() 
  {
    return "photo/Capture";
  }

  static const char* value(const photo::Capture&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<photo::CaptureRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b13d2865c5af2a64e6e30ab1b56e1dd5";
  }

  static const char* value(const photo::CaptureRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<photo::CaptureRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "photo/Capture";
  }

  static const char* value(const photo::CaptureRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<photo::CaptureResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b13d2865c5af2a64e6e30ab1b56e1dd5";
  }

  static const char* value(const photo::CaptureResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<photo::CaptureResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "photo/Capture";
  }

  static const char* value(const photo::CaptureResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PHOTO_SERVICE_CAPTURE_H

