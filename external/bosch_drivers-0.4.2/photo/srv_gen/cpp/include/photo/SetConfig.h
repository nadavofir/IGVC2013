/* Auto-generated by genmsg_cpp for file /home/ras/IGVC2013/external/bosch_drivers-0.4.2/photo/srv/SetConfig.srv */
#ifndef PHOTO_SERVICE_SETCONFIG_H
#define PHOTO_SERVICE_SETCONFIG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace photo
{
template <class ContainerAllocator>
struct SetConfigRequest_ {
  typedef SetConfigRequest_<ContainerAllocator> Type;

  SetConfigRequest_()
  : param()
  , value()
  {
  }

  SetConfigRequest_(const ContainerAllocator& _alloc)
  : param(_alloc)
  , value(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _param_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  param;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _value_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  value;


  typedef boost::shared_ptr< ::photo::SetConfigRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::photo::SetConfigRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetConfigRequest
typedef  ::photo::SetConfigRequest_<std::allocator<void> > SetConfigRequest;

typedef boost::shared_ptr< ::photo::SetConfigRequest> SetConfigRequestPtr;
typedef boost::shared_ptr< ::photo::SetConfigRequest const> SetConfigRequestConstPtr;


template <class ContainerAllocator>
struct SetConfigResponse_ {
  typedef SetConfigResponse_<ContainerAllocator> Type;

  SetConfigResponse_()
  {
  }

  SetConfigResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::photo::SetConfigResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::photo::SetConfigResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetConfigResponse
typedef  ::photo::SetConfigResponse_<std::allocator<void> > SetConfigResponse;

typedef boost::shared_ptr< ::photo::SetConfigResponse> SetConfigResponsePtr;
typedef boost::shared_ptr< ::photo::SetConfigResponse const> SetConfigResponseConstPtr;

struct SetConfig
{

typedef SetConfigRequest Request;
typedef SetConfigResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetConfig
} // namespace photo

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::photo::SetConfigRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::photo::SetConfigRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::photo::SetConfigRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6f5acdb9088557703e392df3355dcb2a";
  }

  static const char* value(const  ::photo::SetConfigRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6f5acdb908855770ULL;
  static const uint64_t static_value2 = 0x3e392df3355dcb2aULL;
};

template<class ContainerAllocator>
struct DataType< ::photo::SetConfigRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "photo/SetConfigRequest";
  }

  static const char* value(const  ::photo::SetConfigRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::photo::SetConfigRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string param\n\
string value\n\
\n\
";
  }

  static const char* value(const  ::photo::SetConfigRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::photo::SetConfigResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::photo::SetConfigResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::photo::SetConfigResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::photo::SetConfigResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::photo::SetConfigResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "photo/SetConfigResponse";
  }

  static const char* value(const  ::photo::SetConfigResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::photo::SetConfigResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::photo::SetConfigResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::photo::SetConfigResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::photo::SetConfigRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.param);
    stream.next(m.value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetConfigRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::photo::SetConfigResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetConfigResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<photo::SetConfig> {
  static const char* value() 
  {
    return "6f5acdb9088557703e392df3355dcb2a";
  }

  static const char* value(const photo::SetConfig&) { return value(); } 
};

template<>
struct DataType<photo::SetConfig> {
  static const char* value() 
  {
    return "photo/SetConfig";
  }

  static const char* value(const photo::SetConfig&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<photo::SetConfigRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6f5acdb9088557703e392df3355dcb2a";
  }

  static const char* value(const photo::SetConfigRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<photo::SetConfigRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "photo/SetConfig";
  }

  static const char* value(const photo::SetConfigRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<photo::SetConfigResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6f5acdb9088557703e392df3355dcb2a";
  }

  static const char* value(const photo::SetConfigResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<photo::SetConfigResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "photo/SetConfig";
  }

  static const char* value(const photo::SetConfigResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PHOTO_SERVICE_SETCONFIG_H

