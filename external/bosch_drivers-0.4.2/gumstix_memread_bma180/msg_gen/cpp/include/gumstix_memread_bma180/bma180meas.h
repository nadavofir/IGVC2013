/* Auto-generated by genmsg_cpp for file /home/ras/IGVC2013/external/bosch_drivers-0.4.2/gumstix_memread_bma180/msg/bma180meas.msg */
#ifndef GUMSTIX_MEMREAD_BMA180_MESSAGE_BMA180MEAS_H
#define GUMSTIX_MEMREAD_BMA180_MESSAGE_BMA180MEAS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace gumstix_memread_bma180
{
template <class ContainerAllocator>
struct bma180meas_ {
  typedef bma180meas_<ContainerAllocator> Type;

  bma180meas_()
  : header()
  , vals()
  {
  }

  bma180meas_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , vals(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _vals_type;
  std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  vals;


  typedef boost::shared_ptr< ::gumstix_memread_bma180::bma180meas_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gumstix_memread_bma180::bma180meas_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct bma180meas
typedef  ::gumstix_memread_bma180::bma180meas_<std::allocator<void> > bma180meas;

typedef boost::shared_ptr< ::gumstix_memread_bma180::bma180meas> bma180measPtr;
typedef boost::shared_ptr< ::gumstix_memread_bma180::bma180meas const> bma180measConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::gumstix_memread_bma180::bma180meas_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::gumstix_memread_bma180::bma180meas_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace gumstix_memread_bma180

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::gumstix_memread_bma180::bma180meas_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::gumstix_memread_bma180::bma180meas_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::gumstix_memread_bma180::bma180meas_<ContainerAllocator> > {
  static const char* value() 
  {
    return "77f3cd2c4156a9950a3ec747c76ba5b2";
  }

  static const char* value(const  ::gumstix_memread_bma180::bma180meas_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x77f3cd2c4156a995ULL;
  static const uint64_t static_value2 = 0x0a3ec747c76ba5b2ULL;
};

template<class ContainerAllocator>
struct DataType< ::gumstix_memread_bma180::bma180meas_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gumstix_memread_bma180/bma180meas";
  }

  static const char* value(const  ::gumstix_memread_bma180::bma180meas_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::gumstix_memread_bma180::bma180meas_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
int16[] vals\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::gumstix_memread_bma180::bma180meas_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::gumstix_memread_bma180::bma180meas_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::gumstix_memread_bma180::bma180meas_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::gumstix_memread_bma180::bma180meas_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.vals);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct bma180meas_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gumstix_memread_bma180::bma180meas_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::gumstix_memread_bma180::bma180meas_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "vals[]" << std::endl;
    for (size_t i = 0; i < v.vals.size(); ++i)
    {
      s << indent << "  vals[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.vals[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // GUMSTIX_MEMREAD_BMA180_MESSAGE_BMA180MEAS_H

