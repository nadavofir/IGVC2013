/* Auto-generated by genmsg_cpp for file /home/ras/IGVC2013/PSoC_Listener/msg/EncoderVelocity.msg */
#ifndef PSOC_LISTENER_MESSAGE_ENCODERVELOCITY_H
#define PSOC_LISTENER_MESSAGE_ENCODERVELOCITY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace PSoC_Listener
{
template <class ContainerAllocator>
struct EncoderVelocity_ {
  typedef EncoderVelocity_<ContainerAllocator> Type;

  EncoderVelocity_()
  : v(0)
  , w(0)
  {
  }

  EncoderVelocity_(const ContainerAllocator& _alloc)
  : v(0)
  , w(0)
  {
  }

  typedef int16_t _v_type;
  int16_t v;

  typedef int16_t _w_type;
  int16_t w;


  typedef boost::shared_ptr< ::PSoC_Listener::EncoderVelocity_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::PSoC_Listener::EncoderVelocity_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct EncoderVelocity
typedef  ::PSoC_Listener::EncoderVelocity_<std::allocator<void> > EncoderVelocity;

typedef boost::shared_ptr< ::PSoC_Listener::EncoderVelocity> EncoderVelocityPtr;
typedef boost::shared_ptr< ::PSoC_Listener::EncoderVelocity const> EncoderVelocityConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::PSoC_Listener::EncoderVelocity_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::PSoC_Listener::EncoderVelocity_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace PSoC_Listener

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::PSoC_Listener::EncoderVelocity_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::PSoC_Listener::EncoderVelocity_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::PSoC_Listener::EncoderVelocity_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ecb7d5299516eb7b426c83bc2bf91b44";
  }

  static const char* value(const  ::PSoC_Listener::EncoderVelocity_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xecb7d5299516eb7bULL;
  static const uint64_t static_value2 = 0x426c83bc2bf91b44ULL;
};

template<class ContainerAllocator>
struct DataType< ::PSoC_Listener::EncoderVelocity_<ContainerAllocator> > {
  static const char* value() 
  {
    return "PSoC_Listener/EncoderVelocity";
  }

  static const char* value(const  ::PSoC_Listener::EncoderVelocity_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::PSoC_Listener::EncoderVelocity_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16 v\n\
int16 w\n\
\n\
";
  }

  static const char* value(const  ::PSoC_Listener::EncoderVelocity_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::PSoC_Listener::EncoderVelocity_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::PSoC_Listener::EncoderVelocity_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.v);
    stream.next(m.w);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct EncoderVelocity_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::PSoC_Listener::EncoderVelocity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::PSoC_Listener::EncoderVelocity_<ContainerAllocator> & v) 
  {
    s << indent << "v: ";
    Printer<int16_t>::stream(s, indent + "  ", v.v);
    s << indent << "w: ";
    Printer<int16_t>::stream(s, indent + "  ", v.w);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PSOC_LISTENER_MESSAGE_ENCODERVELOCITY_H

